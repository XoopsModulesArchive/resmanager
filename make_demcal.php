<?//  ------------------------------------------------------------------------ ////                XOOPS - PHP Content Management System                      ////                    Copyright (c) 2000 XOOPS.org                           ////                       <http://www.xoops.org/>                             //// ------------------------------------------------------------------------- ////  This program is free software; you can redistribute it and/or modify     ////  it under the terms of the GNU General Public License as published by     ////  the Free Software Foundation; either version 2 of the License, or        ////  (at your option) any later version.                                      ////                                                                           ////  You may not change or alter any portion of this comment or credits       ////  of supporting developers from this source code or any supporting         ////  source code which is considered copyrighted (c) material of the          ////  original comment or credit authors.                                      ////                                                                           ////  This program is distributed in the hope that it will be useful,          ////  but WITHOUT ANY WARRANTY; without even the implied warranty of           ////  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            ////  GNU General Public License for more details.                             ////                                                                           ////  You should have received a copy of the GNU General Public License        ////  along with this program; if not, write to the Free Software              ////  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA ////  ------------------------------------------------------------------------ //include ("header.php");include (XOOPS_ROOT_PATH."/header.php");function compare_tab_horaire_sel($a, $b) {	if ($a['id_res'] == $b['id_res']) {		return 0;	}	return ($a['id_res'] > $b['id_res']) ? -1 : 1;}// Recuperation des donnéesif (isset ($_GET['op'])) {	extract($_GET, EXTR_SKIP);} else {	extract($_POST, EXTR_SKIP);}// lien pour revenir revenir à la liste précédenteif (isset ($appel_mkdem))	// appel par edit day cat	$retour = magicToUrl($appel_mkdem);else	// appel par edit day	$retour = "edit_day.php?cal_day=".$cal_day."&cal_month=".$cal_month."&cal_year=".$cal_year."&id_reserv=".$id_res."&appel=".$appel;switch ($op) {	// selection d'un horaire	case 'selection' :		if (!checkRightRes($id_res) == true)			redirect_header($retour, 3, _MD_DENIED_CAT);		//Ajout sélection		$horaire_sel = array ();		$horaire_sel['id_res'] = $id_res;		$horaire_sel['cal_day'] = $cal_day;		$horaire_sel['cal_month'] = $cal_month;		$horaire_sel['cal_year'] = $cal_year;		$horaire_sel['cal_heure'] = $cal_heure;		//$tab_horaire_sel[] = $horaire_sel;		if (!isset ($_SESSION['tab_horaire_sel']))			$_SESSION['tab_horaire_sel'] = array ();		$_SESSION['tab_horaire_sel'][] = $horaire_sel;		redirect_header($retour, 1, _MD_SELOK);		break;		// suppression d'une selection	case 'suppsel' :		// Réorganiser le contenu de la session 		// Supprimer la dernière colonne		for ($i = $num_sel;($i < count($_SESSION['tab_horaire_sel']) - 1); $i ++)			$_SESSION['tab_horaire_sel'][$i] = $_SESSION['tab_horaire_sel'][$i +1];		$taille = count($_SESSION['tab_horaire_sel']);		unset ($_SESSION['tab_horaire_sel'][$taille -1]);		// Renvoie vers la page		redirect_header($retour, 1, _MD_SELSUPP);		break;		// demande de réservation	case 'demande' :		// Titre		echo '<b>'._MD_TITLE_MAKEDEMCAL.'</b><br /><br />';		$tab_horaire_sel = $_SESSION['tab_horaire_sel'];		for ($i = 0; $i < count($cal_heure_fin); $i ++) {			$tab_horaire_sel[$i]['cal_heure_fin'] = $cal_heure_fin[$i];		}		usort($tab_horaire_sel, "compare_tab_horaire_sel");		$dem = new ResManagerDem($xoopsDB);		$demcal = new ResManagerDemcal($xoopsDB);		$tab_message = "";		$ajout = false;		$nb_dem = 0;		$rup_idres = null;		$rup_iddem = null;		foreach ($tab_horaire_sel as $key => $horaire) {			if (!empty ($horaire)) {				// Création de la demande				$dem->id_reserv = $horaire['id_res'];				$dem->id_user = $xoopsUser->uid();				$dem->comm = $myts->oopsAddSlashes($comm_val);				// Lecture de réservation				$res = new ResManagerRes($xoopsDB);				$res->id = $horaire['id_res'];				$res->getReserv();				for ($heure = $horaire['cal_heure']; $heure <= $horaire['cal_heure_fin']; $heure ++) {					$ajout = false;					$demcal->year = $horaire['cal_year'];					$demcal->month = $horaire['cal_month'];					$demcal->day = $horaire['cal_day'];					$demcal->time = $heure;					//if ($demcal->checkValid(& $mess, 0, $horaire['id_res'])) {					if ($demcal->checkValid("", 0, $horaire['id_res'])) {						// Nombre de validés > nbre autorisés par tranche horaire						if ($demcal->countValDemcal($dem) >= $res->nbocc)							$mess = _MD_RESERVFULL;						// Nombre de demandes pour un user supérieur à l'autorisation						else							if ($demcal->countUserDemcal($dem) >= $res->occpers)								$mess = _MD_RESERVFULLUSER;							else {								// Nécessite une validation								if ($nb_dem == 0 or ($rup_idres != null and $rup_idres != $horaire['id_res'])) {									if ($res->valid == 1)										$result = $dem->addDem();									else										$result = $dem->addDemVal();								} else									$result = true;								// Préparation message								if ($result) {									// Création demande calendrier									$demcal->id_dem = $dem->id;									$demcal->year = $horaire['cal_year'];									$demcal->month = $horaire['cal_month'];									$demcal->day = $horaire['cal_day'];									//$demcal->time		= $horaire['cal_heure'];									$demcal->time = $heure;									if ($demcal->addDemcal()) {										$ajout = true;										$mess = _MD_RESERVOK;										$nb_dem ++;									} else {										$dem->suppDem();										$mess = _MD_RESERVKO;									}								} else									$mess = _MD_RESERVKO;							}					}					else $mess = $demcal->getErrMess();					if ($rup_idres != null and $rup_idres != $horaire['id_res']) {						$tab_message .= _MD_RESERNUMANDINFO."<b>".$rup_iddem."</b><br /><br />";						// LEcture demande						$dem_rup = new ResManagerDem($xoopsDB);						$dem_rup->id = $rup_iddem;						$dem_rup->getDem();						// Inscription à la notification pour cette demande						$notification_handler = & xoops_gethandler('notification');						$notification_handler->subscribe('suividem', $dem_rup->id, 'new_dem', $mode = null, $module_id = null, $dem_rup->id_user);						$notification_handler->subscribe('suividem', $dem_rup->id, 'val_dem', $mode = null, $module_id = null, $dem_rup->id_user);						$notification_handler->subscribe('suividem', $dem_rup->id, 'ref_dem', $mode = null, $module_id = null, $dem_rup->id_user);						$notification_handler->subscribe('suividem', $dem_rup->id, 'ann_dem', $mode = null, $module_id = null, $dem_rup->id_user);						// Notification Nouvelle demande pour le demandeur						$notification_handler->triggerEvent('suividem', $dem_rup->id, 'new_dem', $extra_tags = array ('X_LIEN_DEM' => $dem_rup->getLienDem(), 'X_IDDEM' => $dem_rup->id), $user_list = array ($dem_rup->id_user), $module_id = null, 0);						// Le dernier paramètre permet d'envoyer la notification au user lui même						// Notification Nouvelle demande pour administrateur qui a créé la réservation						$extra_tags = array ("X_USERDEM" => getUserInfoFromUid($dem_rup->id_user, 'uname'), "X_IDDEM" => $dem_rup->id, "X_LIENDEM" => $dem_rup->getLienDem());						$notification_handler->triggerEvent('suivires', $dem_rup->id_reserv, 'new_userdem', $extra_tags, $user_list = array (), $module_id = null, 0);					}					$tab_message .= $res->nom." : ".affDate($horaire['cal_year'], $horaire['cal_month'], $horaire['cal_day'], $heure)." ". ($ajout == true ? affImage("ok.gif") : affImage("ko.gif"))." ".$mess."<br />";					$rup_idres = $horaire['id_res'];					$rup_iddem = $dem->id;					$ajout = false;				}			}		}		// Afichage résultat		// Lien pour revenir		// revenir à la liste précédente		echo "<a href=".$retour."> << "._MD_RETOUR."</a>";		echo '<br /><br />';		// Affihage Information 		if ($nb_dem > 0) {			$tab_message .= _MD_RESERNUMANDINFO."<b>".$dem->id."</b>";			// Inscription à la notification pour cette demande			$notification_handler = & xoops_gethandler('notification');			$notification_handler->subscribe('suividem', $dem->id, 'new_dem', $mode = null, $module_id = null, $dem->id_user);			$notification_handler->subscribe('suividem', $dem->id, 'val_dem', $mode = null, $module_id = null, $dem->id_user);			$notification_handler->subscribe('suividem', $dem->id, 'ref_dem', $mode = null, $module_id = null, $dem->id_user);			$notification_handler->subscribe('suividem', $dem->id, 'ann_dem', $mode = null, $module_id = null, $dem->id_user);			// Notification Nouvelle demande pour le demandeur			$notification_handler->triggerEvent('suividem', $dem->id, 'new_dem', $extra_tags = array ('X_LIEN_DEM' => $dem->getLienDem(), 'X_IDDEM' => $dem->id), $user_list = array ($dem->id_user), $module_id = null, 0);			// Le dernier paramètre permet d'envoyer la notification au user lui même			// Notification Nouvelle demande pour administrateur qui a créé la réservation			$extra_tags = array ("X_USERDEM" => getUserInfoFromUid($dem->id_user, 'uname'), "X_IDDEM" => $dem->id, "X_LIENDEM" => $dem->getLienDem());			$notification_handler->triggerEvent('suivires', $dem->id_reserv, 'new_userdem', $extra_tags, $user_list = array (), $module_id = null, 0);		}		// Message					 		themecenterposts('<b>'._MD_RESERV_RESULTAT.'</b>', $tab_message);		echo '<br />';		// vide les séléctions		unset ($_SESSION['tab_horaire_sel']);		break;}include (XOOPS_ROOT_PATH."/footer.php");?>

